Description: Fix for CVE-2015-0282: RSA PKCS#1 signature verification forgery
Author: Nikos Mavrogiannopoulos
Bug-RedHat: https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-0282
Origin: backport, https://bugzilla.redhat.com/attachment.cgi?id=997548&action=diff

--- a/lib/gnutls_algorithms.c	
+++ a/lib/gnutls_algorithms.c	
@@ -1958,6 +1958,14 @@ gnutls_sign_get_name (gnutls_sign_algorithm_t algorithm)
   return ret;
 }
 
+int
+_gnutls_sign_get_hash (gnutls_sign_algorithm_t algorithm)
+{
+  GNUTLS_SIGN_LOOP (if (p->id == algorithm) return p->mac);
+
+  return GNUTLS_MAC_UNKNOWN;
+}
+
 gnutls_sign_algorithm_t
 _gnutls_x509_oid2sign_algorithm (const char *oid)
 {
--- a/lib/gnutls_algorithms.h	
+++ a/lib/gnutls_algorithms.h	
@@ -103,6 +103,7 @@ enum encipher_type
 enum encipher_type _gnutls_kx_encipher_type (gnutls_kx_algorithm_t algorithm);
 
 /* Functions for sign algorithms. */
+int _gnutls_sign_get_hash (gnutls_sign_algorithm_t algorithm);
 gnutls_sign_algorithm_t _gnutls_x509_oid2sign_algorithm (const char *oid);
 gnutls_sign_algorithm_t _gnutls_x509_pk_to_sign (gnutls_pk_algorithm_t pk,
 						 gnutls_mac_algorithm_t mac);
--- a/lib/x509/privkey.c	
+++ a/lib/x509/privkey.c	
@@ -1601,7 +1601,8 @@ gnutls_x509_privkey_verify_data (gnutls_x509_privkey_t key,
       return GNUTLS_E_INVALID_REQUEST;
     }
 
-  result = _gnutls_x509_privkey_verify_signature (data, signature, key);
+  result = _gnutls_x509_privkey_verify_signature (GNUTLS_MAC_UNKNOWN, data, signature, key);
+
   if (result < 0)
     {
       gnutls_assert ();
--- a/lib/x509/verify.c	
+++ a/lib/x509/verify.c	
@@ -272,6 +272,7 @@ _gnutls_verify_certificate2 (gnutls_x509_crt_t cert,
   gnutls_datum_t cert_signature = { NULL, 0 };
   gnutls_x509_crt_t issuer = NULL;
   int ret, issuer_version, result = 0;
+  int sigalg, hashalg;
 
   if (output)
     *output = 0;
@@ -337,8 +338,19 @@ _gnutls_verify_certificate2 (gnutls_x509_crt_t cert,
       goto cleanup;
     }
 
+  sigalg = gnutls_x509_crt_get_signature_algorithm (cert);
+  hashalg = _gnutls_sign_get_hash(sigalg);
+
+  if (hashalg == GNUTLS_MAC_UNKNOWN)
+    {
+      gnutls_assert();
+      result = 0;
+      goto cleanup;
+    }
+
   result =
-    _gnutls_x509_verify_signature (&cert_signed_data, NULL, &cert_signature,
+    _gnutls_x509_verify_signature (hashalg,
+                                   &cert_signed_data, NULL, &cert_signature,
 				   issuer);
   if (result < 0)
     {
@@ -360,10 +372,6 @@ _gnutls_verify_certificate2 (gnutls_x509_crt_t cert,
    */
   if (is_issuer (cert, cert) == 0)
     {
-      int sigalg;
-
-      sigalg = gnutls_x509_crt_get_signature_algorithm (cert);
-
       if (((sigalg == GNUTLS_SIGN_RSA_MD2) &&
 	   !(flags & GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2)) ||
 	  ((sigalg == GNUTLS_SIGN_RSA_MD5) &&
@@ -673,12 +681,12 @@ decode_ber_digest_info (const gnutls_datum_t * info,
  * params[1] is public key
  */
 static int
-_pkcs1_rsa_verify_sig (const gnutls_datum_t * text,
+_pkcs1_rsa_verify_sig (gnutls_mac_algorithm_t hash, const gnutls_datum_t * text,
 		       const gnutls_datum_t * prehash,
 		       const gnutls_datum_t * signature, bigint_t * params,
 		       int params_len)
 {
-  gnutls_mac_algorithm_t hash = GNUTLS_MAC_UNKNOWN;
+  gnutls_mac_algorithm_t phash = GNUTLS_MAC_UNKNOWN;
   int ret;
   opaque digest[MAX_HASH_SIZE], md[MAX_HASH_SIZE], *cmp;
   int digest_size;
@@ -698,7 +706,7 @@ _pkcs1_rsa_verify_sig (const gnutls_datum_t * text,
 
   digest_size = sizeof (digest);
   if ((ret =
-       decode_ber_digest_info (&decrypted, &hash, digest, &digest_size)) != 0)
+       decode_ber_digest_info (&decrypted, &phash, digest, &digest_size)) != 0)
     {
       gnutls_assert ();
       _gnutls_free_datum (&decrypted);
@@ -707,6 +715,15 @@ _pkcs1_rsa_verify_sig (const gnutls_datum_t * text,
 
   _gnutls_free_datum (&decrypted);
 
+  if (hash != GNUTLS_MAC_UNKNOWN && hash != phash)
+    {
+      gnutls_assert();
+      return GNUTLS_E_PK_SIG_VERIFY_FAILED;
+    }
+  else
+    hash = phash;
+  
+
   if (digest_size != _gnutls_hash_get_algo_len (hash))
     {
       gnutls_assert ();
@@ -789,7 +806,7 @@ dsa_verify_sig (const gnutls_datum_t * text,
  * or 1 otherwise.
  */
 static int
-verify_sig (const gnutls_datum_t * tbs,
+verify_sig (int hashalg, const gnutls_datum_t * tbs,
 	    const gnutls_datum_t * hash,
 	    const gnutls_datum_t * signature,
 	    gnutls_pk_algorithm_t pk, bigint_t * issuer_params,
@@ -801,7 +818,7 @@ verify_sig (const gnutls_datum_t * tbs,
     case GNUTLS_PK_RSA:
 
       if (_pkcs1_rsa_verify_sig
-	  (tbs, hash, signature, issuer_params, issuer_params_size) != 0)
+	  (hashalg, tbs, hash, signature, issuer_params, issuer_params_size) != 0)
 	{
 	  gnutls_assert ();
 	  return 0;
@@ -901,7 +918,7 @@ _gnutls_x509_verify_algorithm (gnutls_mac_algorithm_t *hash,
  * 'signature' is the signature!
  */
 int
-_gnutls_x509_verify_signature (const gnutls_datum_t * tbs,
+_gnutls_x509_verify_signature (int hashalg, const gnutls_datum_t * tbs,
 			       const gnutls_datum_t * hash,
 			       const gnutls_datum_t * signature,
 			       gnutls_x509_crt_t issuer)
@@ -921,7 +938,7 @@ _gnutls_x509_verify_signature (const gnutls_datum_t * tbs,
     }
 
   ret =
-    verify_sig (tbs, hash, signature,
+    verify_sig (hashalg, tbs, hash, signature,
 		gnutls_x509_crt_get_pk_algorithm (issuer, NULL),
 		issuer_params, issuer_params_size);
   if (ret < 0)
@@ -946,13 +963,13 @@ _gnutls_x509_verify_signature (const gnutls_datum_t * tbs,
  * 'signature' is the signature!
  */
 int
-_gnutls_x509_privkey_verify_signature (const gnutls_datum_t * tbs,
+_gnutls_x509_privkey_verify_signature (int hashalg, const gnutls_datum_t * tbs,
 				       const gnutls_datum_t * signature,
 				       gnutls_x509_privkey_t issuer)
 {
   int ret;
 
-  ret = verify_sig (tbs, NULL, signature, issuer->pk_algorithm,
+  ret = verify_sig (hashalg, tbs, NULL, signature, issuer->pk_algorithm,
 		    issuer->params, issuer->params_size);
   if (ret < 0)
     {
@@ -1174,7 +1191,7 @@ _gnutls_verify_crl2 (gnutls_x509_crl_t crl,
   gnutls_datum_t crl_signed_data = { NULL, 0 };
   gnutls_datum_t crl_signature = { NULL, 0 };
   gnutls_x509_crt_t issuer;
-  int ret, result;
+  int ret, result, sigalg, hashalg;
 
   if (output)
     *output = 0;
@@ -1226,8 +1243,18 @@ _gnutls_verify_crl2 (gnutls_x509_crl_t crl,
       goto cleanup;
     }
 
+
+  sigalg = gnutls_x509_crl_get_signature_algorithm (crl);
+  hashalg = _gnutls_sign_get_hash(sigalg);
+  if (hashalg == GNUTLS_MAC_UNKNOWN)
+    {
+      gnutls_assert();
+      result = 0;
+      goto cleanup;
+    }
+
   ret =
-    _gnutls_x509_verify_signature (&crl_signed_data, NULL, &crl_signature, issuer);
+    _gnutls_x509_verify_signature (hashalg, &crl_signed_data, NULL, &crl_signature, issuer);
   if (ret < 0)
     {
       gnutls_assert ();
@@ -1242,10 +1269,6 @@ _gnutls_verify_crl2 (gnutls_x509_crl_t crl,
     }
 
   {
-    int sigalg;
-
-    sigalg = gnutls_x509_crl_get_signature_algorithm (crl);
-
     if (((sigalg == GNUTLS_SIGN_RSA_MD2) &&
 	 !(flags & GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2)) ||
 	((sigalg == GNUTLS_SIGN_RSA_MD5) &&
--- a/lib/x509/x509.c	
+++ a/lib/x509/x509.c	
@@ -2426,7 +2426,7 @@ gnutls_x509_crt_verify_data (gnutls_x509_crt_t crt, unsigned int flags,
       return GNUTLS_E_INVALID_REQUEST;
     }
 
-  result = _gnutls_x509_verify_signature (data, NULL, signature, crt);
+  result = _gnutls_x509_verify_signature (GNUTLS_MAC_UNKNOWN, data, NULL, signature, crt);
   if (result < 0)
     {
       gnutls_assert ();
@@ -2462,7 +2462,7 @@ gnutls_x509_crt_verify_hash (gnutls_x509_crt_t crt, unsigned int flags,
       return GNUTLS_E_INVALID_REQUEST;
     }
 
-  result = _gnutls_x509_verify_signature (NULL, hash, signature, crt);
+  result = _gnutls_x509_verify_signature (GNUTLS_MAC_UNKNOWN, NULL, hash, signature, crt);
   if (result < 0)
     {
       gnutls_assert ();
--- a/lib/x509/x509_int.h	
+++ a/lib/x509/x509_int.h	
@@ -187,11 +187,11 @@ int gnutls_x509_crt_is_issuer (gnutls_x509_crt_t cert,
 int _gnutls_x509_verify_algorithm(gnutls_mac_algorithm_t *hash,
 				  const gnutls_datum_t * signature,
 				  const gnutls_x509_crt_t crt);
-int _gnutls_x509_verify_signature (const gnutls_datum_t * tbs,
+int _gnutls_x509_verify_signature (int sigalg, const gnutls_datum_t * tbs,
 				   const gnutls_datum_t * hash,
 				   const gnutls_datum_t * signature,
 				   gnutls_x509_crt_t issuer);
-int _gnutls_x509_privkey_verify_signature (const gnutls_datum_t * tbs,
+int _gnutls_x509_privkey_verify_signature (int hash, const gnutls_datum_t * tbs,
 					   const gnutls_datum_t * signature,
 					   gnutls_x509_privkey_t issuer);
 
